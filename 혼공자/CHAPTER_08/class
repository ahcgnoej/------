객체 지향 프로그래밍 언어들은 클래스라는 문법으로 객체를 효율적이고 안전하게 만들어 객체 지향 패러다임을 쉽게 프로그래밍에 적용할 수 있도록 도와줌

-----
같은 형태의 객체 만들기
-> 학생 성적 관리 프로그램
 > 학생이라는 객체가 필요하고 학생들로부터 성적 관리에 필요한 공통사항을 추출하는데,이를 추상화라고 함. 학생들이 여러 명이므로 추출한 요소는 배열을 이용해 관리 

-----
class

-> 클래스 선언하기 
  > 클래스 이름은 첫 글자를 대문자로 

-> 생성자
  > 자바스크립트에서는 함수를 new로 생성하여 객체를 생성할 수 있다. 
  > 생성자는 클래스를 기반으로 인스턴스를 생성할 때 처음 호출되는 메소드이다. 따라서 생성자에는 속성을 추가하는 등 객체의 초기화 처리를 한다. 
  > 메모리 내 객체가 생성될 때 자동적으로 단 한 번 호출되어 객체의 구조를 인식하고 생성되는 객체의 멤버변수들을 초기화하는 데 목적을 둔 것을 말한다. 
  > 생성자 함수로 사용될 함수는 첫글자를 대문자로 쓰는 컨벤션이 있다. 

-> construct 메서드 
  > 객체의 초기 상태를 설정할 수 있음 
  > 메서드를 클래스 내부에 정의하여 객체의 행동을 설명할 수 있음 
      class Animal {
        constructor(name) {
            this.name = name;
        }

        speak() {
            console.log(this.name + ' makes a noise.');
        }
    }

    class Dog extends Animal {
        constructor(name) {
            super(name); // 부모 클래스의 constructor 호출
        }

        speak() {
            console.log(this.name + ' barks.');
        }
    }
  > Dog 클래스는 Animal 클래스로부터 name 속성과 speak 메서드를 상속받는다. Dog 클래스 내의 speak 메서드는 오버라이딩(재정의)하여 'barks'라는 새로운 행동을 추가한다.

-> 상속
  > 상속은 클래스의 선언 코드를 중복해서 작성하지 않도록 함으로써 코드의 생산 효율을 올린다
  > class 클래스 이름 extends 부모클래스이름 {}

-> private 속성과 메소드 
  > 사용자의 잘못된 사용을 막아 클래스의 안정성을 확보하기 위해 나온 문법 
  > 속성과 메소드 이름 앞에 #을 붙인다 
  class 클래스 이름 {
    #속성이름
    $메소드 이름(){
    }
  }