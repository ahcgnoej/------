-----
객체
-> 배열은 요소에 접근할 때 인덱스를 사용하지만, 객체는 키를 사용
-> 객체는 중괄호{...}로 생성하며, 다음과 같은 형태의 자료를 쉼표로 연결해서 입력
-> 키:값

const product={
  제품명 : '7D 건조 망고',
  유형 : '당절임',
  성분 : '망고, 설탕, 치자황색소',
  원산지 : '필리핀'
}

-> 객체 요소에 접근하기 : 대괄호 [] 사용
  > product['제품명'] //'7D 건조 망고'
  > 식별자가 아닌 문자열을 키로 사용했을 때는 무조건 대괄호를 사용해야 객체의 요소에 접근 가능 
-> 객체 요소에 접근하기 : 온점 . 사용 
  > product.제품명 //'7D 건조 망고'

-----
속성과 메소드
-> 객체의 속성은 모든 형태의 자료값을 가질 수 있음 
-> 속성과 메소드 구분하기
  > 메소드 : 객체의 속성 중 함수 자료형인 속성 
  const pet = {
    name : '구름',
    eat : function(food){}
  }
  person.eat() // 메소드 호출 
-> 메소드 내부에서 this 키워드 사용하기
  > 자기 자신의 자신이 가진 속성이라는 것을 표시할 때 this 키워드를 사용
  const pet = {
    name: '구름',
    eat : function(food){
      alert(this.name+'은/는'+food+'을/를 먹습니다')
    }
  }
  pet.eat('밥')
-> 동적으로 객체 속성 추가/제거
  > 동적으로 객체 속성 추가 
    const student= {}
    student.이름 = '채정'
    student.취미 = '개발'
    student.장래희망 = '개발자'
    console.log(JSON.stringify(student,null,2))
    //JSON.stringify 함수
    //javascript 객체를 JSON 문자열로 변한한다. 이 함수는 세가지 인수를 받는다 
    //JSON.stringify(변환할객체,리플레이서 함수 또는 배열,들여쓰기 칸 수)
    //왜 사용하는가? 1) 가독성 : 가독성을 높임 2) 콘솔에 객체를 읽기 쉽게 출력할 수 있어 디버깅할 때 유용 
  > 동적으로 객체 속성 제거
    > delete 키워드 사용
    > delete 객체.속성  
    delete student.장래희망
