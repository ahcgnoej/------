함수의 기본 형태
-> function () {}

-----
익명 함수 선언하기
const 함수 = function () {
  console.log('함수내부코드1')
  console.log('함수내부코드2')
  console.log('함수내부코드3')
}
함수();
함수();

console.log(typeof(함수))
console.log(함수)

// 함수내부코드1
// 함수내부코드2
// 함수내부코드3
// 함수내부코드1
// 함수내부코드2
// 함수내부코드3
// function
// [Function: 함수]

-----
선언적 함수
-> 선언적 함수는 이름을 붙여 생성
function 함수() {
}
-> 위와 같은 코드는 아래와 같은 기능을 수행
let 함수 = function () {};

-----
매개변수와 리턴값 (기본적인 함수)
function f(x) {
  return x*x
}
console.log(f(3)) //9

-----
나머지 매개변수 
-> 가변 매개변수 함수 : 호출할 때 매개변수의 개수가 고정적이지 않은 함수
-> 자바스크립트에서 이런 함수를 구현할 때는 "나머지 매개변수" 라는  특이한 형태의 문법을 사용
-> function 함수이름(...나머지 매개변수) {}

-----
나머지 매개변수와 일반 매개변수 조합 
-> function 함수이름 (매개변수, 매개변수, ...나머지 매개변수){}
function sample(a,b,...c){
  console.log(a,b,c)
}
sample(1,2) // 1 2 []
sample(1,2,3) // 1 2 [3]
sample(1,2,3,4) // 1 2 [3,4] 

-----
Array.isArray() 메소드
-> 매개변수로 들어온 자료형이 배열인지 숫자인지 확인 

-----
기본 매개변수
-> 여러 번 반복 입력되는 매개변수에 기본값을 지정하여 사용
-> 함수이름(매개변수, 매개변수=기본값, 매개변수=기본값)

-----
콜백 함수
-> 매개변수로 전달하는 함수를 콜백함수라고 한다
-> 콜백 함수를 활용하는 함수 : forEach()
  > forEach() 메소드는 배열이 갖고 있는 함수로써 단순하게 배열 내부의 요소를 사용해서 콜백 함수를 호출 
  > forEach(function(value,index,array){})
-> 콜백 함수를 활용하는 함수 : map()
  > 콜백 함수에서 리턴한 값들을 기반으로 새로운 배열을 만드는 함수
-> 콜백 함수를 활용하는 함수 : filter()
  > 콜백 함수에서 리턴하는 값이 true인 것들만 모아서 새로운 배열을 만드는 함수

-----
화살표 함수
-> functionl 키워드 대신 화살표(=>)를 사용하며, 다음과 같은 형태로 생성하는 간단한 함수
-> (매개변수)=>{
  불 표현식 || 불 표현식이 거짓일 때 실행할 문장 
}
-> (매개변수)=>리턴값 

-----
타이머 함수
-> 특정 시간마다 또는 특정 시간 이후에 콜백 함수를 호출할 수 있는 타이머 함수
 > setTimeout(함수,시간) 특정 시간 후에 함수를 한 번 호출
 > setInterval(함수,시간) 특정 시간마다 함수를 호출 
 > clearTimeout(타이머_ID) setTimeout() 함수로 설정한 타이머를 제거
 > clearInterval(타이머_ID) setInterval() 함수로 설정하나 타이머를 제거 