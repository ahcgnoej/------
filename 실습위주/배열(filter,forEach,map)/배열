배열과 객체의 차이
-> 배열은 index를 통해 접근, 객체는 key를 통해 접근 

배열을 새로 생성하는 방법
-> new Array()
let num = new Array(1,2,3,4,5) 이처럼 new Array()를 사용해 5개 요소를 가진 배열 생성
let num = new Array(); 이처럼 빈 배열을 생성할 수도 있음
let num = []; 위와 같은 기능.
let num = new Array(12);  이 코드는 길이가 12인 빈 배열을 생성하고 12개의 undefined 요소를 가지게 됨. 
let num = Array.of(2); 이 코드는 값 '2'를 요소로 가진 배열 '[2]'를 생성 
let num = Array.of(2,4,6); 이 코드는 [2,4,6]이라는 배열을 생성 
-> Array() 

기존 배열을 통해 새로운 배열을 생성하는 방법 
-> 기존 배열을 복사해서 새로운 배열로 만들기
let copy = Array.from(num);
-> 확장 연산자를 사용하여 새로운 배열 만들기 
let copy = [0, ...num, 300,500]
-> 확장연산자 
let copy = [...num]

forEach()
-> arr.forEach(func(value,index,array))
  > value : 현재 순회중인 요소
  > index : 현재 순회중인 요소의 index
  > array : 배열 객체 
-> 배열에서각 요소를 순회하면서 함수를 호출하여 배열 요소를 다루는 기능, 새로운 배열 반환 안 함 
-> 배열 뿐만 아니라, Set나 Map에서도 사용 가능하다 
let sum = 0
num.forEach((n)=>{sum+=n});
console.log(sum)
-> forEach()자체는 원본배열을 수정하지 않으나 내부에서 수행하는 작업에 따라 원본배열이 수정될 수 있다.  

map()
-> 배열에서 각 요소를 순회하면서 함수를 호출하여 새로운 배열을 생성하여 반환한다. 
-> 콜백함수를 이용해 각각의 요소에 호출해서 그 값을 변환할 수 있게 해준다. 

forEach()과 map()의 차이점
-> forEach()는 반환값이 없지만 map()는 새로운 배열을 반환한다.
-> forEach()는 부수효과를 일으킬 수 있는 작업(배열 요소 수정, 출력 등)을 수행할 때 사용되지만 map()는 주로 순수함수를 사용하여 배열을 변형하는데 사용되며 원본배열을 수정하지 않는다. 

filter()
-> 배열에서 각 요소를 순회하면서 함수를 호출하여 새로운 배열을 생성하여 반환한다. 