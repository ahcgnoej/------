Set
-> 배열과 유사하고 값의 모음, 컬렉션(데이터의 집합,그룹)이다
-> 중복된 값을 허용하지 않는다
-> 인덱스가 따로 존재하지 않기 때문에 요소 순서에 의미가 없고 인덱스로 요소에 접근할 수 있다. 이터레이터를 사용하여 조회한다

->Set 생성자 함수로 생성 
  > 이터러블을 인수로 전달받아 Set 객체를 생성하고 중복된 값은 Set 객체에 요소로 저장되지 않는다. 
  > const set = new Set() 

-> add() 메서드로 값 추가
  > set.add(1); //set는 {1}
  > add() 메서드는 값을 추가한 후에 세트를 반환하기 때문에 아래와 같이 연쇄적으로 호출 가능
  set.add(1).add(2).add('A') //set는 {1,2,'A'}

-> delete() 메서드로 값 삭제
  > set.delete(1) //true
  > set.delete(2) //false 

-> has() 메서드로 특정 값 확인
 > const result = set.has('A')?'Yes':'No'

-> clear() 메서드로 모든 값 제거 
  > set.clear(); // set은 {}

-> size로 값의 개수 확인
  > set.size //0

-> 배열에서 중복 값 제거
  > 세트는 중복값을 허용하지 않는다는 것을 이용함
  const num = [1,2,3,4,4,4,5]
  const uniqueNum = [...new Set(num)];
  //만약 ...을 없앤다면? 배열 num을 Set객체로 변환하여 중복된 값을 제거하는 거다
  //전개연산자 ...을 사용하여 Set객체의 요소들을 다시 배열로 변환했다. 
