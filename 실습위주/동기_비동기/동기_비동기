동기는 직렬적으로 작동하는 방식이고 비동기는 병렬적으로 작동하는 방식이다. 4

-----
동기 
-> 하나의 태스크가 끝날 때까지 기다렸다가 다음 태스크가 실행된다

-----
비동기
-> 한번에 여러 태스크가 동시에 병렬적으로 실행된다. 
-> 비동기 요청시 응답 후 처리할 콜백함수를 함께 알려준다. 따라서 해당 태스크가 완료되었을 때, 콜백 함수가 호출된다.
-> 콜백함수는 다른 함수의 인자로 넘겨지고 해당 함수가 처리된 후 호출되는 함수이다
function callback(){
  console.log('콜백함수호출')
}
setTimeout(callback,1000);
console.log('작업을 수행함')
-> 콜백지옥 조심해야 된다. 이를 위해 Promise를 사용한다. 프로미스는 전통적인 콜백 패턴이 가진 단점을 보완하며 비동기 처리 시점을 명확하게 표현할 수 있다는 장점이 있다. 
-> Promise
  > resolve와 reject 함수를 전달받는다. (두 개의 콜백 함수를 인수로 받는다. 두 번째 인수에는 거부됨 상태를 처리하는 함수를 지정한다. 두 인수는 선택적이며 두 번재 인수를 생략할 수 있다.)
  > resolve는 정상적인 결과 값을 반환하고 reject는 정상적이지 않았던 값을 반환한다. 
  > promese 객체가 반환하는 값을 구하기 위해서는 then() 메서드를 사용한다. 
  > catch() 메서드를 사용하여 거부됨 상태만 처리할 수 있다. 